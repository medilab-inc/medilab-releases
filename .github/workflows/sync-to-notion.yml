name: Sync to Notion

on:
  push:
    branches:
      - main
    paths:
      - 'products/**/*.md'
      - 'docs/**/*.md'
      - 'templates/**/*.md'
  workflow_dispatch: # 手動実行も可能

jobs:
  sync:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install notion-client
        run: pip install notion-client
        
      - name: Sync Release Notes to Notion
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_ROOT_PAGE_ID: ${{ secrets.NOTION_ROOT_PAGE_ID }}
        run: |
          # Pythonスクリプトで同期処理を実行
          python -c "
import os
import glob
from pathlib import Path
from notion_client import Client

# Notion client setup
notion = Client(auth=os.environ['NOTION_TOKEN'])
root_page_id = os.environ['NOTION_ROOT_PAGE_ID']

# Find all markdown files
md_files = glob.glob('products/**/*.md', recursive=True)

print(f'Found {len(md_files)} markdown files to sync')
for file in md_files:
    print(f'  - {file}')

# Simple upload for now - just create child pages
for md_file in md_files:
    with open(md_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Create page title from filename
    title = Path(md_file).stem.replace('_', ' ')
    
    try:
        # Create a new page in Notion
        response = notion.pages.create(
            parent={'page_id': root_page_id},
            properties={
                'title': {
                    'title': [
                        {
                            'text': {
                                'content': title
                            }
                        }
                    ]
                }
            },
            children=[
                {
                    'object': 'block',
                    'type': 'paragraph',
                    'paragraph': {
                        'rich_text': [
                            {
                                'text': {
                                    'content': content[:2000]  # Notionの制限のため最初の2000文字のみ
                                }
                            }
                        ]
                    }
                }
            ]
        )
        print(f'✅ Created page: {title}')
    except Exception as e:
        print(f'❌ Failed to create page {title}: {e}')
"
          
      - name: Notify Slack on Success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: '✅ Notionへの同期が完了しました'
          SLACK_CHANNEL: '#release-notes'
          
      - name: Notify Slack on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: '❌ Notion同期に失敗しました。ログを確認してください。'
          SLACK_CHANNEL: '#release-notes'