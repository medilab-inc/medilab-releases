name: Notion Sync

on:
  push:
    branches:
      - main
    paths:
      - 'products/**/*.md'
      - '.github/workflows/notion-sync.yml'
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: pip install notion-client markdown2
      
      - name: Test Notion Connection
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_ROOT_PAGE_ID: ${{ secrets.NOTION_ROOT_PAGE_ID }}
        run: |
          python -c "
          import os
          from notion_client import Client
          
          notion = Client(auth=os.environ['NOTION_TOKEN'])
          page_id = os.environ['NOTION_ROOT_PAGE_ID']
          
          try:
              page = notion.pages.retrieve(page_id)
              print(f'✅ Successfully connected to Notion page')
              print(f'Page ID: {page_id}')
          except Exception as e:
              print(f'❌ Failed to connect to Notion: {e}')
              exit(1)
          "
      
      - name: List Markdown Files
        run: |
          echo "=== Markdown files to sync ==="
          find products -name "*.md" -type f
      
      - name: Sync to Notion
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_ROOT_PAGE_ID: ${{ secrets.NOTION_ROOT_PAGE_ID }}
        run: |
          python -c "
          import os
          import re
          import glob
          from pathlib import Path
          from notion_client import Client
          
          notion = Client(auth=os.environ['NOTION_TOKEN'])
          root_page_id = os.environ['NOTION_ROOT_PAGE_ID']
          
          def markdown_to_notion_blocks(md_text):
              '''Convert markdown text to Notion blocks'''
              blocks = []
              lines = md_text.split('\\n')
              i = 0
              
              while i < len(lines) and len(blocks) < 100:  # Notion API limit is 100 blocks
                  line = lines[i]
                  
                  # Headers
                  if line.startswith('# '):
                      blocks.append({
                          'object': 'block',
                          'type': 'heading_1',
                          'heading_1': {
                              'rich_text': [{'text': {'content': line[2:].strip()[:100]}}]
                          }
                      })
                  elif line.startswith('## '):
                      blocks.append({
                          'object': 'block',
                          'type': 'heading_2',
                          'heading_2': {
                              'rich_text': [{'text': {'content': line[3:].strip()[:100]}}]
                          }
                      })
                  elif line.startswith('### '):
                      blocks.append({
                          'object': 'block',
                          'type': 'heading_3',
                          'heading_3': {
                              'rich_text': [{'text': {'content': line[4:].strip()[:100]}}]
                          }
                      })
                  # Bullet lists
                  elif line.strip().startswith('- '):
                      text = line.strip()[2:].strip()[:1900]
                      if text:
                          blocks.append({
                              'object': 'block',
                              'type': 'bulleted_list_item',
                              'bulleted_list_item': {
                                  'rich_text': [{'text': {'content': text}}]
                              }
                          })
                  # Numbered lists
                  elif re.match(r'^\\d+\\.\\s', line.strip()):
                      text = re.sub(r'^\\d+\\.\\s', '', line.strip())[:1900]
                      if text:
                          blocks.append({
                              'object': 'block',
                              'type': 'numbered_list_item',
                              'numbered_list_item': {
                                  'rich_text': [{'text': {'content': text}}]
                              }
                          })
                  # Bold text in paragraph
                  elif line.strip() and not line.strip().startswith('<'):
                      text = line.strip()[:1900]
                      # Convert **bold** to Notion bold
                      rich_text = []
                      parts = re.split(r'(\\*\\*[^*]+\\*\\*)', text)
                      for part in parts:
                          if part.startswith('**') and part.endswith('**'):
                              rich_text.append({
                                  'text': {'content': part[2:-2]},
                                  'annotations': {'bold': True}
                              })
                          elif part:
                              rich_text.append({'text': {'content': part}})
                      
                      if rich_text:
                          blocks.append({
                              'object': 'block',
                              'type': 'paragraph',
                              'paragraph': {'rich_text': rich_text[:10]}  # Limit rich text items
                          })
                  # Skip empty lines but don't create blocks for them
                  
                  i += 1
              
              return blocks
          
          # Find all markdown files
          md_files = glob.glob('products/**/*.md', recursive=True)
          
          for md_file in md_files:
              with open(md_file, 'r', encoding='utf-8') as f:
                  content = f.read()
              
              # Create page title from filename
              title = Path(md_file).stem.replace('_', ' ')
              
              try:
                  # Get all lines
                  all_lines = content.split('\\n')
                  total_lines = len(all_lines)
                  
                  # Create initial blocks (first 100 lines)
                  first_chunk = '\\n'.join(all_lines[:100])
                  blocks = markdown_to_notion_blocks(first_chunk)
                  
                  # Create a new page in Notion with first chunk
                  response = notion.pages.create(
                      parent={'page_id': root_page_id},
                      properties={
                          'title': {
                              'title': [{
                                  'text': {
                                      'content': title
                                  }
                              }]
                          }
                      },
                      children=blocks[:100] if blocks else None  # Notion API limit
                  )
                  page_id = response['id']
                  print(f'✅ Created page: {title}')
                  print(f'   Page ID: {page_id}')
                  
                  # Add remaining content in batches
                  remaining_lines = all_lines[100:]
                  batch_num = 1
                  
                  while remaining_lines and batch_num < 3:  # Limit to 3 batches total
                      chunk = '\\n'.join(remaining_lines[:100])
                      additional_blocks = markdown_to_notion_blocks(chunk)
                      
                      if additional_blocks:
                          try:
                              # Append blocks to the page
                              for block in additional_blocks[:50]:  # Add 50 blocks at a time
                                  notion.blocks.children.append(page_id, children=[block])
                              print(f'   Added batch {batch_num+1}: {len(additional_blocks[:50])} blocks')
                          except Exception as e:
                              print(f'   Warning: Could not add batch {batch_num+1}: {e}')
                      
                      remaining_lines = remaining_lines[100:]
                      batch_num += 1
                  
                  print(f'   Total content: {total_lines} lines processed')
              except Exception as e:
                  print(f'❌ Failed to create page {title}: {e}')
          "
      
      - name: Notify Slack Success
        if: success() && github.event_name == 'push'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ -n "$SLACK_WEBHOOK" ]; then
            curl -X POST $SLACK_WEBHOOK \
              -H 'Content-Type: application/json' \
              -d '{"text":"✅ リリースノートがNotionに同期されました\n更新内容: '"${{ github.event.head_commit.message }}"'"}'
          fi