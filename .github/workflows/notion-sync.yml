name: Notion Sync

on:
  push:
    branches:
      - main
    paths:
      - 'products/**/*.md'
      - '.github/workflows/notion-sync.yml'
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Get previous commit for comparison
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: pip install notion-client markdown2
      
      - name: Test Notion Connection
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_ROOT_PAGE_ID: ${{ secrets.NOTION_ROOT_PAGE_ID }}
        run: |
          python -c "
          import os
          from notion_client import Client
          
          notion = Client(auth=os.environ['NOTION_TOKEN'])
          page_id = os.environ['NOTION_ROOT_PAGE_ID']
          
          try:
              page = notion.pages.retrieve(page_id)
              print(f'✅ Successfully connected to Notion page')
              print(f'Page ID: {page_id}')
          except Exception as e:
              print(f'❌ Failed to connect to Notion: {e}')
              exit(1)
          "
      
      - name: Get Changed Files
        id: changed_files
        run: |
          echo "=== Changed markdown files ==="
          if [ "${{ github.event_name }}" = "push" ]; then
            # Get changed files from the commit
            git diff --name-only HEAD~1 HEAD | grep -E "^products/.*\.md$" > changed_files.txt || echo "" > changed_files.txt
          else
            # For manual workflow dispatch, sync all files
            find products -name "*.md" -type f > changed_files.txt
          fi
          
          # Display changed files
          if [ -s changed_files.txt ]; then
            cat changed_files.txt
            echo "files_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No markdown files changed"
            echo "files_changed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Sync to Notion
        if: steps.changed_files.outputs.files_changed == 'true'
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_ROOT_PAGE_ID: ${{ secrets.NOTION_ROOT_PAGE_ID }}
        run: |
          python -c "
          import os
          import re
          import json
          from pathlib import Path
          from notion_client import Client
          
          notion = Client(auth=os.environ['NOTION_TOKEN'])
          root_page_id = os.environ['NOTION_ROOT_PAGE_ID']
          
          def markdown_to_notion_blocks(md_text):
              '''Convert markdown text to Notion blocks'''
              blocks = []
              lines = md_text.split('\\n')
              i = 0
              in_details = False
              details_content = []
              details_summary = ''
              
              while i < len(lines) and len(blocks) < 100:  # Notion API limit is 100 blocks
                  line = lines[i]
                  
                  # Handle <details> tags
                  if '<details>' in line:
                      in_details = True
                      details_content = []
                      i += 1
                      continue
                  elif '<summary>' in line and in_details:
                      # Extract summary text
                      summary_match = re.search(r'<summary>([^<]+)</summary>', line)
                      if summary_match:
                          details_summary = summary_match.group(1).strip()
                      i += 1
                      continue
                  elif '</details>' in line and in_details:
                      # Create a toggle block with the collected content
                      if details_summary:
                          toggle_children = []
                          for detail_line in details_content:
                              if detail_line.strip().startswith('- '):
                                  text = detail_line.strip()[2:].strip()[:1900]
                                  if text:
                                      # Process bold text in toggle content
                                      rich_text = []
                                      parts = re.split(r'(\\*\\*[^*]+\\*\\*)', text)
                                      for part in parts:
                                          if part.startswith('**') and part.endswith('**'):
                                              rich_text.append({
                                                  'text': {'content': part[2:-2]},
                                                  'annotations': {'bold': True}
                                              })
                                          elif part:
                                              rich_text.append({'text': {'content': part}})
                                      
                                      toggle_children.append({
                                          'object': 'block',
                                          'type': 'bulleted_list_item',
                                          'bulleted_list_item': {
                                              'rich_text': rich_text[:10] if rich_text else [{'text': {'content': text}}]
                                          }
                                      })
                          
                          blocks.append({
                              'object': 'block',
                              'type': 'toggle',
                              'toggle': {
                                  'rich_text': [{'text': {'content': details_summary[:100]}}],
                                  'children': toggle_children[:10]  # Limit children
                              }
                          })
                      in_details = False
                      details_summary = ''
                      i += 1
                      continue
                  elif in_details:
                      # Collect content inside details
                      details_content.append(line)
                      i += 1
                      continue
                  
                  # Headers
                  elif line.startswith('# '):
                      blocks.append({
                          'object': 'block',
                          'type': 'heading_1',
                          'heading_1': {
                              'rich_text': [{'text': {'content': line[2:].strip()[:100]}}]
                          }
                      })
                  elif line.startswith('## '):
                      blocks.append({
                          'object': 'block',
                          'type': 'heading_2',
                          'heading_2': {
                              'rich_text': [{'text': {'content': line[3:].strip()[:100]}}]
                          }
                      })
                  elif line.startswith('### '):
                      blocks.append({
                          'object': 'block',
                          'type': 'heading_3',
                          'heading_3': {
                              'rich_text': [{'text': {'content': line[4:].strip()[:100]}}]
                          }
                      })
                  # Bullet lists
                  elif line.strip().startswith('- '):
                      text = line.strip()[2:].strip()[:1900]
                      if text:
                          # Process bold text in list items
                          rich_text = []
                          parts = re.split(r'(\\*\\*[^*]+\\*\\*)', text)
                          for part in parts:
                              if part.startswith('**') and part.endswith('**'):
                                  rich_text.append({
                                      'text': {'content': part[2:-2]},
                                      'annotations': {'bold': True}
                                  })
                              elif part:
                                  rich_text.append({'text': {'content': part}})
                          
                          blocks.append({
                              'object': 'block',
                              'type': 'bulleted_list_item',
                              'bulleted_list_item': {
                                  'rich_text': rich_text[:10] if rich_text else [{'text': {'content': text}}]
                              }
                          })
                  # Numbered lists
                  elif re.match(r'^\\d+\\.\\s', line.strip()):
                      text = re.sub(r'^\\d+\\.\\s', '', line.strip())[:1900]
                      if text:
                          # Process bold text in list items
                          rich_text = []
                          parts = re.split(r'(\\*\\*[^*]+\\*\\*)', text)
                          for part in parts:
                              if part.startswith('**') and part.endswith('**'):
                                  rich_text.append({
                                      'text': {'content': part[2:-2]},
                                      'annotations': {'bold': True}
                                  })
                              elif part:
                                  rich_text.append({'text': {'content': part}})
                          
                          blocks.append({
                              'object': 'block',
                              'type': 'numbered_list_item',
                              'numbered_list_item': {
                                  'rich_text': rich_text[:10] if rich_text else [{'text': {'content': text}}]
                              }
                          })
                  # Bold text in paragraph
                  elif line.strip() and not line.strip().startswith('<'):
                      text = line.strip()[:1900]
                      # Convert **bold** to Notion bold
                      rich_text = []
                      parts = re.split(r'(\\*\\*[^*]+\\*\\*)', text)
                      for part in parts:
                          if part.startswith('**') and part.endswith('**'):
                              rich_text.append({
                                  'text': {'content': part[2:-2]},
                                  'annotations': {'bold': True}
                              })
                          elif part:
                              rich_text.append({'text': {'content': part}})
                      
                      if rich_text:
                          blocks.append({
                              'object': 'block',
                              'type': 'paragraph',
                              'paragraph': {'rich_text': rich_text[:10]}  # Limit rich text items
                          })
                  
                  i += 1
              
              return blocks
          
          def find_page_by_title(parent_id, title):
              '''Find a page by title within a parent page'''
              try:
                  # Search for pages with the given title
                  results = notion.blocks.children.list(block_id=parent_id)
                  for block in results.get('results', []):
                      if block.get('type') == 'child_page':
                          page = notion.pages.retrieve(block['id'])
                          page_title = page.get('properties', {}).get('title', {}).get('title', [])
                          if page_title and page_title[0].get('text', {}).get('content') == title:
                              return block['id']
              except Exception as e:
                  print(f'Error searching for page: {e}')
              return None
          
          def delete_all_blocks(page_id):
              '''Delete all blocks from a page'''
              try:
                  blocks = notion.blocks.children.list(block_id=page_id)
                  for block in blocks.get('results', []):
                      notion.blocks.delete(block_id=block['id'])
              except Exception as e:
                  print(f'Error deleting blocks: {e}')
          
          # Read changed files list
          with open('changed_files.txt', 'r') as f:
              md_files = [line.strip() for line in f if line.strip()]
          
          if not md_files:
              print('No markdown files to sync')
              exit(0)
          
          for md_file in md_files:
              if not os.path.exists(md_file):
                  print(f'⚠️  File not found: {md_file}')
                  continue
                  
              with open(md_file, 'r', encoding='utf-8') as f:
                  content = f.read()
              
              # Create page title from filename
              title = Path(md_file).stem.replace('_', ' ')
              
              try:
                  # Convert first part of content
                  lines = content.split('\\n')
                  important_content = '\\n'.join(lines[:500])
                  blocks = markdown_to_notion_blocks(important_content)
                  
                  # Check if page already exists
                  existing_page_id = find_page_by_title(root_page_id, title)
                  
                  if existing_page_id:
                      # Update existing page
                      print(f'🔄 Updating existing page: {title}')
                      
                      # Delete all existing blocks
                      delete_all_blocks(existing_page_id)
                      
                      # Add new blocks
                      if blocks:
                          for block in blocks[:100]:  # Notion API limit
                              notion.blocks.children.append(block_id=existing_page_id, children=[block])
                      
                      print(f'✅ Updated page: {title}')
                      print(f'   Page ID: {existing_page_id}')
                      print(f'   Blocks updated: {len(blocks)} (from {len(lines)} total lines)')
                  else:
                      # Create a new page in Notion
                      response = notion.pages.create(
                          parent={'page_id': root_page_id},
                          properties={
                              'title': {
                                  'title': [{
                                      'text': {
                                          'content': title
                                      }
                                  }]
                              }
                          },
                          children=blocks[:100] if blocks else None  # Notion API limit
                      )
                      
                      print(f'✅ Created new page: {title}')
                      print(f'   Page ID: {response[\"id\"]}')
                      print(f'   Blocks created: {len(blocks)} (from {len(lines)} total lines)')
                  
                  # Add a link to GitHub for full content
                  if len(lines) > 500:
                      print(f'   Note: Full content ({len(lines)} lines) available in GitHub')
              except Exception as e:
                  print(f'❌ Failed to process page {title}: {e}')
          "
      
      - name: Notify Slack Success
        if: success() && github.event_name == 'push' && steps.changed_files.outputs.files_changed == 'true'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ -n "$SLACK_WEBHOOK" ]; then
            curl -X POST $SLACK_WEBHOOK \
              -H 'Content-Type: application/json' \
              -d '{"text":"✅ リリースノートがNotionに同期されました\n更新内容: '"${{ github.event.head_commit.message }}"'"}'
          fi